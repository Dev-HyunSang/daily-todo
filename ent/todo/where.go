// Code generated by ent, DO NOT EDIT.

package todo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dev-hyunsang/daily-todo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldID, id))
}

// TodoUUID applies equality check predicate on the "todo_uuid" field. It's identical to TodoUUIDEQ.
func TodoUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldTodoUUID, v))
}

// UserUUID applies equality check predicate on the "user_uuid" field. It's identical to UserUUIDEQ.
func UserUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldUserUUID, v))
}

// IsDone applies equality check predicate on the "is_done" field. It's identical to IsDoneEQ.
func IsDone(v bool) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldIsDone, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldContext, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldUpdatedAt, v))
}

// TodoUUIDEQ applies the EQ predicate on the "todo_uuid" field.
func TodoUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldTodoUUID, v))
}

// TodoUUIDNEQ applies the NEQ predicate on the "todo_uuid" field.
func TodoUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldTodoUUID, v))
}

// TodoUUIDIn applies the In predicate on the "todo_uuid" field.
func TodoUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldTodoUUID, vs...))
}

// TodoUUIDNotIn applies the NotIn predicate on the "todo_uuid" field.
func TodoUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldTodoUUID, vs...))
}

// TodoUUIDGT applies the GT predicate on the "todo_uuid" field.
func TodoUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldTodoUUID, v))
}

// TodoUUIDGTE applies the GTE predicate on the "todo_uuid" field.
func TodoUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldTodoUUID, v))
}

// TodoUUIDLT applies the LT predicate on the "todo_uuid" field.
func TodoUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldTodoUUID, v))
}

// TodoUUIDLTE applies the LTE predicate on the "todo_uuid" field.
func TodoUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldTodoUUID, v))
}

// UserUUIDEQ applies the EQ predicate on the "user_uuid" field.
func UserUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldUserUUID, v))
}

// UserUUIDNEQ applies the NEQ predicate on the "user_uuid" field.
func UserUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldUserUUID, v))
}

// UserUUIDIn applies the In predicate on the "user_uuid" field.
func UserUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldUserUUID, vs...))
}

// UserUUIDNotIn applies the NotIn predicate on the "user_uuid" field.
func UserUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldUserUUID, vs...))
}

// UserUUIDGT applies the GT predicate on the "user_uuid" field.
func UserUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldUserUUID, v))
}

// UserUUIDGTE applies the GTE predicate on the "user_uuid" field.
func UserUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldUserUUID, v))
}

// UserUUIDLT applies the LT predicate on the "user_uuid" field.
func UserUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldUserUUID, v))
}

// UserUUIDLTE applies the LTE predicate on the "user_uuid" field.
func UserUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldUserUUID, v))
}

// IsDoneEQ applies the EQ predicate on the "is_done" field.
func IsDoneEQ(v bool) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldIsDone, v))
}

// IsDoneNEQ applies the NEQ predicate on the "is_done" field.
func IsDoneNEQ(v bool) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldIsDone, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(sql.FieldContainsFold(FieldContext, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		p(s.Not())
	})
}
