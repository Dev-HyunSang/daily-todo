// Code generated by ent, DO NOT EDIT.

package todo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the todo type in the database.
	Label = "to_do"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTodoUUID holds the string denoting the todo_uuid field in the database.
	FieldTodoUUID = "todo_uuid"
	// FieldUserUUID holds the string denoting the user_uuid field in the database.
	FieldUserUUID = "user_uuid"
	// FieldIsDone holds the string denoting the is_done field in the database.
	FieldIsDone = "is_done"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the todo in the database.
	Table = "to_dos"
)

// Columns holds all SQL columns for todo fields.
var Columns = []string{
	FieldID,
	FieldTodoUUID,
	FieldUserUUID,
	FieldIsDone,
	FieldContext,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTodoUUID holds the default value on creation for the "todo_uuid" field.
	DefaultTodoUUID func() uuid.UUID
	// DefaultIsDone holds the default value on creation for the "is_done" field.
	DefaultIsDone bool
	// DefaultContext holds the default value on creation for the "context" field.
	DefaultContext string
)

// OrderOption defines the ordering options for the ToDo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTodoUUID orders the results by the todo_uuid field.
func ByTodoUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTodoUUID, opts...).ToFunc()
}

// ByUserUUID orders the results by the user_uuid field.
func ByUserUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserUUID, opts...).ToFunc()
}

// ByIsDone orders the results by the is_done field.
func ByIsDone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDone, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
