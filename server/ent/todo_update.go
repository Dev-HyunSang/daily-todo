// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dev-hyunsang/daily-todo/ent/predicate"
	"github.com/dev-hyunsang/daily-todo/ent/todo"
	"github.com/google/uuid"
)

// ToDoUpdate is the builder for updating ToDo entities.
type ToDoUpdate struct {
	config
	hooks    []Hook
	mutation *ToDoMutation
}

// Where appends a list predicates to the ToDoUpdate builder.
func (tdu *ToDoUpdate) Where(ps ...predicate.ToDo) *ToDoUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetTodoUUID sets the "todo_uuid" field.
func (tdu *ToDoUpdate) SetTodoUUID(u uuid.UUID) *ToDoUpdate {
	tdu.mutation.SetTodoUUID(u)
	return tdu
}

// SetNillableTodoUUID sets the "todo_uuid" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableTodoUUID(u *uuid.UUID) *ToDoUpdate {
	if u != nil {
		tdu.SetTodoUUID(*u)
	}
	return tdu
}

// SetUserUUID sets the "user_uuid" field.
func (tdu *ToDoUpdate) SetUserUUID(u uuid.UUID) *ToDoUpdate {
	tdu.mutation.SetUserUUID(u)
	return tdu
}

// SetIsDone sets the "is_done" field.
func (tdu *ToDoUpdate) SetIsDone(b bool) *ToDoUpdate {
	tdu.mutation.SetIsDone(b)
	return tdu
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableIsDone(b *bool) *ToDoUpdate {
	if b != nil {
		tdu.SetIsDone(*b)
	}
	return tdu
}

// SetContext sets the "context" field.
func (tdu *ToDoUpdate) SetContext(s string) *ToDoUpdate {
	tdu.mutation.SetContext(s)
	return tdu
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableContext(s *string) *ToDoUpdate {
	if s != nil {
		tdu.SetContext(*s)
	}
	return tdu
}

// SetCreatedAt sets the "created_at" field.
func (tdu *ToDoUpdate) SetCreatedAt(t time.Time) *ToDoUpdate {
	tdu.mutation.SetCreatedAt(t)
	return tdu
}

// SetUpdatedAt sets the "updated_at" field.
func (tdu *ToDoUpdate) SetUpdatedAt(t time.Time) *ToDoUpdate {
	tdu.mutation.SetUpdatedAt(t)
	return tdu
}

// Mutation returns the ToDoMutation object of the builder.
func (tdu *ToDoUpdate) Mutation() *ToDoMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *ToDoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ToDoMutation](ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *ToDoUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *ToDoUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *ToDoUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tdu *ToDoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(todo.Table, todo.Columns, sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TodoUUID(); ok {
		_spec.SetField(todo.FieldTodoUUID, field.TypeUUID, value)
	}
	if value, ok := tdu.mutation.UserUUID(); ok {
		_spec.SetField(todo.FieldUserUUID, field.TypeUUID, value)
	}
	if value, ok := tdu.mutation.IsDone(); ok {
		_spec.SetField(todo.FieldIsDone, field.TypeBool, value)
	}
	if value, ok := tdu.mutation.Context(); ok {
		_spec.SetField(todo.FieldContext, field.TypeString, value)
	}
	if value, ok := tdu.mutation.CreatedAt(); ok {
		_spec.SetField(todo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tdu.mutation.UpdatedAt(); ok {
		_spec.SetField(todo.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// ToDoUpdateOne is the builder for updating a single ToDo entity.
type ToDoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToDoMutation
}

// SetTodoUUID sets the "todo_uuid" field.
func (tduo *ToDoUpdateOne) SetTodoUUID(u uuid.UUID) *ToDoUpdateOne {
	tduo.mutation.SetTodoUUID(u)
	return tduo
}

// SetNillableTodoUUID sets the "todo_uuid" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableTodoUUID(u *uuid.UUID) *ToDoUpdateOne {
	if u != nil {
		tduo.SetTodoUUID(*u)
	}
	return tduo
}

// SetUserUUID sets the "user_uuid" field.
func (tduo *ToDoUpdateOne) SetUserUUID(u uuid.UUID) *ToDoUpdateOne {
	tduo.mutation.SetUserUUID(u)
	return tduo
}

// SetIsDone sets the "is_done" field.
func (tduo *ToDoUpdateOne) SetIsDone(b bool) *ToDoUpdateOne {
	tduo.mutation.SetIsDone(b)
	return tduo
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableIsDone(b *bool) *ToDoUpdateOne {
	if b != nil {
		tduo.SetIsDone(*b)
	}
	return tduo
}

// SetContext sets the "context" field.
func (tduo *ToDoUpdateOne) SetContext(s string) *ToDoUpdateOne {
	tduo.mutation.SetContext(s)
	return tduo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableContext(s *string) *ToDoUpdateOne {
	if s != nil {
		tduo.SetContext(*s)
	}
	return tduo
}

// SetCreatedAt sets the "created_at" field.
func (tduo *ToDoUpdateOne) SetCreatedAt(t time.Time) *ToDoUpdateOne {
	tduo.mutation.SetCreatedAt(t)
	return tduo
}

// SetUpdatedAt sets the "updated_at" field.
func (tduo *ToDoUpdateOne) SetUpdatedAt(t time.Time) *ToDoUpdateOne {
	tduo.mutation.SetUpdatedAt(t)
	return tduo
}

// Mutation returns the ToDoMutation object of the builder.
func (tduo *ToDoUpdateOne) Mutation() *ToDoMutation {
	return tduo.mutation
}

// Where appends a list predicates to the ToDoUpdate builder.
func (tduo *ToDoUpdateOne) Where(ps ...predicate.ToDo) *ToDoUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *ToDoUpdateOne) Select(field string, fields ...string) *ToDoUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated ToDo entity.
func (tduo *ToDoUpdateOne) Save(ctx context.Context) (*ToDo, error) {
	return withHooks[*ToDo, ToDoMutation](ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *ToDoUpdateOne) SaveX(ctx context.Context) *ToDo {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *ToDoUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *ToDoUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tduo *ToDoUpdateOne) sqlSave(ctx context.Context) (_node *ToDo, err error) {
	_spec := sqlgraph.NewUpdateSpec(todo.Table, todo.Columns, sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToDo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todo.FieldID)
		for _, f := range fields {
			if !todo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TodoUUID(); ok {
		_spec.SetField(todo.FieldTodoUUID, field.TypeUUID, value)
	}
	if value, ok := tduo.mutation.UserUUID(); ok {
		_spec.SetField(todo.FieldUserUUID, field.TypeUUID, value)
	}
	if value, ok := tduo.mutation.IsDone(); ok {
		_spec.SetField(todo.FieldIsDone, field.TypeBool, value)
	}
	if value, ok := tduo.mutation.Context(); ok {
		_spec.SetField(todo.FieldContext, field.TypeString, value)
	}
	if value, ok := tduo.mutation.CreatedAt(); ok {
		_spec.SetField(todo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tduo.mutation.UpdatedAt(); ok {
		_spec.SetField(todo.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ToDo{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
